% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions_netCDF.R
\name{read_netCDF}
\alias{read_netCDF}
\alias{read_netCDF_as_array}
\alias{read_netCDF_as_raster}
\alias{read_netCDF_as_stars}
\title{Read a \var{netCDF}}
\usage{
read_netCDF(
  x,
  method = c("array", "raster", "stars", "xy_subset"),
  var = NULL,
  nc_name_crs = "crs",
  nc_name_crs_wkt = "crs_wkt",
  locations = NULL,
  ...
)

read_netCDF_as_array(
  x,
  var = NULL,
  nc_name_crs = "crs",
  nc_name_crs_wkt = "crs_wkt",
  xy_names = c("lon", "lat"),
  time_ids = -1,
  vertical_ids = -1,
  collapse_degen = TRUE,
  load_values = TRUE,
  ...
)

read_netCDF_as_raster(
  x,
  var = NULL,
  nc_name_crs = "crs",
  nc_name_crs_wkt = "crs_wkt",
  ...
)

read_netCDF_as_stars(
  x,
  var = NULL,
  nc_name_crs = "crs",
  nc_name_crs_wkt = "crs_wkt",
  ...
)
}
\arguments{
\item{x}{An object identifying a \var{netCDF} file, i.e.,
a character string as file name or an object of class \var{ncdf4} derived
from \code{ncdf4::nc_open}.}

\item{method}{A character string. Determines how the \var{netCDF} is read
and if a spatial subset (by \code{locations}) is extracted.}

\item{var}{A character string. The variable name to be read. Passed along as
\var{varname} for \var{rasters} or \var{var} for \var{stars} targets.}

\item{nc_name_crs}{A character string. The name of the \var{crs} variable
in the \var{netCDF}.
Function \code{\link{create_netCDF}} hard codes \var{"crs"}.}

\item{nc_name_crs_wkt}{A character string. The name of the attribute
that holds the \var{WKT2} string of the \var{crs} variable
in the \var{netCDF}.
Function \code{\link{create_netCDF}} hard codes \var{"crs_wkt"}.}

\item{locations}{An object from which \var{x} and \var{y} coordinate values
can be extracted that describe the \var{xy} locations of each \code{data}
row, e.g., a matrix or \var{data.frame} or a spatial points object
inheriting from \var{sf} or \var{Spatial*}.}

\item{...}{Additional arguments passed on to the specific functions.}

\item{xy_names}{A vector with two character strings. The names of the
\var{x} and \var{y} spatial dimensions of a \var{netCDF} file.}

\item{time_ids}{An integer vector. The index to read a subset of
time steps; a value of \code{-1} means to read all.}

\item{vertical_ids}{An integer vector. The index to read a subset of
vertical steps; a value of \code{-1} means to read all.}

\item{collapse_degen}{A logical value. If \code{TRUE}, then degenerate, i.e.,
\code{length-1} vertical and time dimensions in the returned array are
collapsed. A degenerate variable dimension, in the case of a
\code{"xy"} data structure, is always collapsed. The dimension/s of the
\var{xy-space} is/are never collapsed.}

\item{load_values}{A logical value. If \code{FALSE}, then data values are
not returned
(i.e., element "data" of the returned object will be \code{NULL}).}
}
\value{
A named list including a data \var{array}
  (the list contains completed information to re-create the file with a
  call to \code{\link{create_netCDF}}),
  a \code{\link[raster:RasterLayer-class]{raster::RasterLayer}}, or
  a \code{stars::stars} object.
}
\description{
Read a \var{netCDF} as produced by \code{create_netCDF}
}
\section{Notes}{

  Reading discrete \var{netCDF}s,
  i.e., cases \var{"szt"}, \var{"st"}, \var{"sz"}, and \var{"s"},
  is mostly supported; see examples.
}

\section{Details}{
 \code{\link{read_netCDF_as_raster}} is a thin wrapper
around \code{\link[raster:raster]{raster::raster}},
but makes an extra attempt to correctly set the \var{crs} object.

 \code{\link{read_netCDF_as_stars}} is a thin wrapper
around \code{\link[stars:read_ncdf]{stars::read_ncdf}},
but makes an extra attempt to correctly set the \var{crs} object.
}

\examples{
tmp_nc <- create_example_netCDFs(tempdir(), c("xyt", "szt"), "timeseries")

## Read gridded netCDF as array
data_xyt <- read_netCDF(
  tmp_nc[["xyt"]],
  method = "array",
  xy_names = c("x", "y")
)

if (requireNamespace("graphics")) {
  graphics::persp(
    x = data_xyt[["xyspace"]][["x"]],
    y = data_xyt[["xyspace"]][["y"]],
    z = data_xyt[["data"]][, , 15],
    theta = 30,
    phi = 30,
    expand = 0.5,
    col = "lightblue"
  )
}

## Read discrete netCDF as array
data_szt <- read_netCDF(
  tmp_nc[["szt"]],
  method = "array",
  xy_names = c("x", "y")
)

if (requireNamespace("graphics")) {
  cols <- grDevices::hcl.colors(12, "YlOrRd", rev = TRUE)

  plot(
    data_szt[["xyspace"]][["x"]],
    data_szt[["xyspace"]][["y"]],
    col = cols[cut(data_szt[["data"]][, 1, 15], breaks = 12)],
    pch = 16
  )

  graphics::image(
    x = data_szt[["site"]],
    y = data_szt[["vertical_values"]],
    z = data_szt[["data"]][, , 15],
    col = cols
  )
}


## Read netCDF as raster object
# This will generate several warnings and messages
raster_xyt <- read_netCDF(tmp_nc[["xyt"]], method = "raster", band = 15)
raster::plot(raster_xyt)

raster_szt <- read_netCDF(tmp_nc[["szt"]], method = "raster", band = 15)
raster::plot(raster_szt)

## Read netCDF as stars object
stars_xyt <- read_netCDF(tmp_nc[["xyt"]], method = "stars", var = "sine")
plot(stars_xyt)

stars_szt <- read_netCDF(tmp_nc[["szt"]], method = "stars", var = "sine")
plot(stars_szt)

## Read gridded netCDF as array and extract subset
datasubset_xyt <- read_netCDF(
  tmp_nc[["xyt"]],
  method = "xy_subset",
  locations = cbind(x = seq(-5, 5), y = 2501316 + seq(-5, 5)),
  xy_names = c("x", "y")
)

## Read CRS of netCDFs
read_crs_from_netCDF(tmp_nc[["xyt"]])
read_crs_from_netCDF(tmp_nc[["szt"]])

## Read attributes of netCDFs
read_attributes_from_netCDF(tmp_nc[["xyt"]], var = "sine")
read_attributes_from_netCDF(
  tmp_nc[["xyt"]],
  group = "all",
  var = "sine",
  xy_names = c("x", "y")
)
read_attributes_from_netCDF(tmp_nc[["szt"]], group = "global")

# Clean up
unlink(unlist(tmp_nc))

}
