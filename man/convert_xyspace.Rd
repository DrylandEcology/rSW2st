% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions_netCDF.R
\name{convert_xyspace}
\alias{convert_xyspace}
\title{Expand/collapse between separate and combined \var{x} and \var{y} dimensions}
\usage{
convert_xyspace(
  grid,
  data,
  locations,
  locations_crs = sf::st_crs(locations),
  data_str = c("xyzt", "xyt", "xyz", "xy"),
  direction = c("expand", "collapse")
)
}
\arguments{
\item{grid}{An object that describes a gridded \var{xy-space}.
Regular, rectangular grids are the only currently supported type.
This can be \itemize{
  \item a \code{\link[raster:RasterLayer-class]{raster::RasterLayer}}
        object,
  \item a \code{stars::stars} object,
  \item a file name pointing to such a raster on disk;
  \item a list, such as the one produced by \code{\link{get_xyspace}}.
  \item an object with coordinate values for all \var{gridcell} centers
        that can be passed to \code{\link{as_points}};
}
The \var{crs} of the grid coordinate values must match the one of the
data locations.}

\item{data}{A numeric array or vector (optional). A vector is converted
to a one-column matrix.}

\item{locations}{An object from which \var{x} and \var{y} coordinate values
can be extracted that describe the \var{xy} locations of each \code{data}
row, e.g., a matrix or \var{data.frame} or a spatial points object
inheriting from \var{sf} or \var{Spatial*}.}

\item{locations_crs}{An object which is a \var{crs} or
from which one can be derived
that describes the \var{crs} of \code{locations}.}

\item{data_str}{A character string describing the dimensions of \code{data}
where \var{"xy"} stands for \var{x} and \var{y} spatial dimensions
if the spatial structure is gridded,
while \var{"s"} stands for \var{site} if the spatial structure are
discrete points;
\var{z} stands for a vertical dimension; and \var{t} stands for a
temporal dimension.}

\item{direction}{A character string. The direction of the operation.}
}
\value{
A copy of \code{data} with one dimension added/removed.
}
\description{
Expand/collapse between separate and combined \var{x} and \var{y} dimensions
}
\section{Details}{

The expanding direction expects that the first dimension of \code{data}
matches the first dimension of \code{locations}.
In this case, \code{locations} and \code{locations_crs} will be passed to
\code{\link{as_points}}.
}

\section{Notes}{

The use of \code{data_str} currently refers to the "expanded" state
unlike how the argument is used by other functions. This may change
in future versions of this function.
}

\examples{
tmp_nc <- create_example_netCDFs(tempdir(), "xyt", "timeseries")
data_xyt <- read_netCDF(tmp_nc[["xyt"]], "array", xy_names = c("x", "y"))

# Collapse x-y-t into xy-t format
res_collapsed <- convert_xyspace(
  grid = data_xyt[["xyspace"]],
  data = data_xyt[["data"]],
  locations = expand.grid(data_xyt[["xyspace"]][c("x", "y")]),
  data_str = "xyt",
  direction = "collapse"
)

# Expand xy-t into x-y-t format
res_expanded <- convert_xyspace(
  grid = data_xyt[["xyspace"]],
  data = res_collapsed,
  locations = expand.grid(data_xyt[["xyspace"]][c("x", "y")]),
  data_str = "xyt",
  direction = "expand"
)

# Round trip (using all grid locations) recovers data (but not names)
all.equal(data_xyt[["data"]], res_expanded, check.attributes = FALSE)

# Clean up
unlink(unlist(tmp_nc))

}
