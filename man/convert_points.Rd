% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/conversions.R
\name{convert_points}
\alias{convert_points}
\title{Convert two-dimensional locations to a spatially explicit object}
\usage{
convert_points(locations, to_class = c("sf", "sfc", "sp"), crs = 4326)
}
\arguments{
\item{locations}{A numerical two-dimensional object
(a \code{matrix}, \code{array}, or \code{data.frame})
with longitude/X, latitude/Y as columns;
a \code{\link[sp:SpatialPoints-class]{sp::SpatialPoints}} object; or
a \var{sf} object with a point geometry,
i.e., an object with a class \var{sf} or \var{sfc}.}

\item{to_class}{A character string. Convert either
to \var{"sp"} for
a \code{\link[sp:SpatialPoints-class]{sp::SpatialPoints}} object;
convert to \var{"sf"} for a \code{\link[sf:sf]{sf}} object; or
convert to \var{"sfc"} for
a \code{\link[sf:sfc_POINT]{sf::sfc_POINT}} object.}

\item{crs}{An object which is a \var{crs} or from which one can be derived.
\code{x} can
be numeric as a \var{EPSG} number;
a character string as a \var{wkt} or \var{proj4};
or of a class including
  \code{\link[raster:Raster-class]{raster::Raster}},
  \code{\link[sp:Spatial-class]{sp::Spatial}},
  \code{\link[sp:CRS-class]{sp::CRS}},
  or a \code{\link[sf]{sf}} or \code{\link[sf]{sfc}} class.}
}
\value{
An object of the requested class. If the input
  object \code{locations} is already of the requested class, then it is
  returned unchanged; otherwise, non-geometry/non-spatial data may be
  discarded.
}
\description{
Convert two-dimensional locations to a spatially explicit object
}
\section{Details}{

  Argument \code{crs} is only used if \code{locations} is not already a
  spatial object with a \code{crs}.
}

\examples{
 locations <- matrix(
   data = c(-120.325, -111.245, 39.855, 36.753),
   nrow = 2
 )

 pts_sf1 <- convert_points(locations, to_class = "sf")
 pts_sfc1 <- convert_points(locations, to_class = "sfc")
 pts_sp1 <- convert_points(locations, to_class = "sp")

 pts_sf2 <- convert_points(pts_sp1, to_class = "sf")
 pts_sfc2 <- convert_points(pts_sp1, to_class = "sfc")
 pts_sp2 <- convert_points(pts_sf1, to_class = "sp")

 all.equal(pts_sf1, pts_sf2)
 all.equal(pts_sfc1, pts_sfc2)
 all.equal(pts_sp1, pts_sp2)
 all.equal(locations, sf::st_coordinates(pts_sf1), check.attributes = FALSE)
 all.equal(locations, sf::st_coordinates(pts_sfc1), check.attributes = FALSE)
 all.equal(locations, sp::coordinates(pts_sp1), check.attributes = FALSE)

}
